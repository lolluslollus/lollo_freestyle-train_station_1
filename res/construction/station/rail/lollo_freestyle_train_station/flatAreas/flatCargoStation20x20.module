local _constants = require('lollo_freestyle_train_station.constants')
-- local constructionutil = require "constructionutil"
local moduleHelpers = require('lollo_freestyle_train_station.moduleHelpers')
local modulesutil = require "modulesutil"
local transfUtils = require('lollo_freestyle_train_station.transfUtils')
local transfUtilsUG = require "transf"


function data()
	return {
		availability = {
			yearFrom = 0,
			yearTo = 0
		},
		category = {
			categories = { "cargo-road-access", "cargo-road-access-axial", },
		},
		cost = {
			price = 0,
		},
		description = {
			name = _("FlatCargoStation20x20Name"),
			description = _("FlatCargoStation20x20Desc"),
			icon = "ui/lollo_freestyle_train_station/flatCargoStation20x20.tga"
		},
		metadata = {
			nEvenSegmentPairs = 1,
			widthOnOwnTerminalHead = 20,
			moreCapacity = {
				cargo = 80,
				passenger = 0
			}
		},
		order = {
			value = 35,
		},
		type = _constants.flatCargoArea8x10ModuleType,
		updateFn = function(result, slotTransf, tag, slotId, addModelFn, params, updateScriptParams)
			local nTerminal, nTrackEdge, baseId = result.demangleId(slotId)
			if not nTerminal or not baseId then return end

			local _terminalData = params.terminals[nTerminal]
			if baseId == _constants.idBases.axialStation0MSlotId then -- ad hoc
				local yShift = nTrackEdge == 1
					and (_terminalData.isTrackOnPlatformLeft and 5 or -5)
					or (_terminalData.isTrackOnPlatformLeft and -5 or 5)
				slotTransf = transfUtils.getTransf_YShifted(slotTransf, yShift)
			end

			local zAdjustedTransf = moduleHelpers.flatAreas.getMNAdjustedTransf(params, slotId, slotTransf)

			local _eraPrefix = moduleHelpers.getEraPrefix2(params, nTerminal, _terminalData, nTrackEdge)

			local myGroundFacesFillKey = moduleHelpers.getGroundFacesFillKey_cargo(result, nTerminal, _eraPrefix)
			local myModelId = 'lollo_freestyle_train_station/railroad/flatSides/cargo/era_c_station_20x20.mdl'
			if _eraPrefix == moduleHelpers.eras.era_b.prefix then
				myModelId = 'lollo_freestyle_train_station/railroad/flatSides/cargo/era_b_station_20x20.mdl'
			elseif _eraPrefix == moduleHelpers.eras.era_a.prefix then
				myModelId = 'lollo_freestyle_train_station/railroad/flatSides/cargo/era_a_station_20x20.mdl'
			end

			result.models[#result.models + 1] = {
				id = myModelId,
				slotId = slotId,
				transf = zAdjustedTransf,
				tag = tag
			}

			if baseId == _constants.idBases.axialStation0MSlotId then
				moduleHelpers.axialAreas.addCargoLaneToSelf(result, zAdjustedTransf, tag, slotId, params, nTerminal, _terminalData, nTrackEdge)
			else
				moduleHelpers.flatAreas.addCargoLaneToSelf(result, zAdjustedTransf, tag, slotId, params, nTerminal, _terminalData, nTrackEdge)
			end

			local groundFace = { -- this model requires some z shift
				{-5.5, -11, _constants.platformSideBitsZ -0.8, 1},
				{-5.5, 11, _constants.platformSideBitsZ -0.8, 1},
				{18.5, 11, _constants.platformSideBitsZ -0.8, 1},
				{18.5, -11, _constants.platformSideBitsZ -0.8, 1},
			}
			modulesutil.TransformFaces(zAdjustedTransf, groundFace)
			result.groundFaces[#result.groundFaces + 1] = moduleHelpers.getGroundFace(groundFace, myGroundFacesFillKey)

			local terrainAlignmentList = {
				faces = {
					groundFace,
				},
				optional = true,
				slopeHigh = _constants.slopeHigh,
				slopeLow = _constants.slopeLow,
				type = 'EQUAL',
			}
			result.terrainAlignmentLists[#result.terrainAlignmentLists + 1] = terrainAlignmentList

			table.insert(result.slots, {
				id = result.mangleId(nTerminal, nTrackEdge, _constants.idBases.cargoStationSquareOuterSlotId),
				shape = 1,
				spacing = {1, 1, 2, 2},
				-- transf = transfUtilsUG.mul(
				-- 	zAdjustedTransf, -- this model requires some z shift
				-- 	{ 1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  17.2, 2.5, _constants.platformSideBitsZ -0.8, 1 }
				-- ),
				transf = transfUtils.getTransf_Shifted(
					zAdjustedTransf,
					{17.2, 2.5, _constants.platformSideBitsZ -0.8}
				),
				type = _constants.cargoStationSquareModuleType,
			})
		end,

		getModelsFn = function(params)
			return {
				{
					id = 'lollo_freestyle_train_station/railroad/flatSides/cargo/era_a_station_20x20.mdl',
					transf = {1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  -12, 0, 0, 1},
				},
				moduleHelpers.flatAreas.getPreviewIcon(params),
			}
		end
	}
end
