local constants = require('lollo_freestyle_train_station.constants')
local logger = require('lollo_freestyle_train_station.logger')

local _paramConstants = {
    lollo_platform_as_asset_embankment = {
        max = 1.5,
        min = -1.5,
        step = 0.5,
    },
    lollo_platform_as_asset_x_10m = {
        max = 100,
        min = 0,
        step = 10,
    },
    lollo_platform_as_asset_y_10m = {
        max = 100,
        min = 0,
        step = 10,
    },
    lollo_platform_as_asset_x_1m = {
        max = 10,
        min = 1,
        step = 1,
    },
    lollo_platform_as_asset_y_1m = {
        max = 10,
        min = 1,
        step = 1,
    },
}

local _paramHelpers = {
    embankment = {
        getSliderValues = function()
            local max, min, step = _paramConstants.lollo_platform_as_asset_embankment.max, _paramConstants.lollo_platform_as_asset_embankment.min, _paramConstants.lollo_platform_as_asset_embankment.step
            local results = {}
            for i = min, max, step do
                -- results[#results+1] = tostring(i) -- ("%.1g"):format(i)
                results[#results+1] = ("%.2g"):format(i)
            end
            return results
        end,
        getSliderMiddleValue = function()
            local max, step = _paramConstants.lollo_platform_as_asset_embankment.max, _paramConstants.lollo_platform_as_asset_embankment.step
            return math.floor(max / step)
        end,
        getValueFromSliderParamValue = function(paramValue)
            local min, step = _paramConstants.lollo_platform_as_asset_embankment.min, _paramConstants.lollo_platform_as_asset_embankment.step
            return min + step * (paramValue or 0)
        end,
    },
    MinusN2PlusN = {
        getSliderValues = function(paramKey)
            local max, step = _paramConstants[paramKey].max, _paramConstants[paramKey].step
            local results = {}
            for i = -max, max, step do
                results[#results+1] = tostring(i)
            end
            return results
        end,
        getSliderMiddleValue = function(paramKey)
            local max, step = _paramConstants[paramKey].max, _paramConstants[paramKey].step
            return math.floor(max / step)
        end,
        getValueFromSliderParamValue = function(paramKey, paramValue)
            local max, step = _paramConstants[paramKey].max, _paramConstants[paramKey].step
            return -max + step * paramValue
        end,
    },
    Nought2PlusN = {
        getSliderValues = function(paramKey)
            local max, min, step = _paramConstants[paramKey].max, _paramConstants[paramKey].min, _paramConstants[paramKey].step
            local results = {}
            for i = min, max, step do
                results[#results+1] = tostring(i)
            end
            return results
        end,
        getSliderMiddleValue = function(paramKey)
            local max, min, step = _paramConstants[paramKey].max, _paramConstants[paramKey].min, _paramConstants[paramKey].step
            return math.floor((max - min) / step / 2)
        end,
        getValueFromSliderParamValue = function(paramKey, paramValue)
            local min, step = _paramConstants[paramKey].min, _paramConstants[paramKey].step
            return min + step * paramValue
        end,
    },
    terrainAlignmentType = {
        getValues = function()
            return {'EQUAL', 'LESS', 'GREATER'}
        end,
    },
}

function data()
    return {
        -- type = 'STREET_CONSTRUCTION',
        type = 'ASSET_DEFAULT',
        description = {
            name = _('PlatformAsAssetName'),
            description = _('PlatformAsAssetDesc')
        },
        availability = {
            yearFrom = 0,
            yearTo = 0
        },
        categories = { 'stairs' },
        order = 1104,
        autoRemovable = false,
        -- buildMode = 'MULTI',
		skipCollision = true,
        params = {
            {
                key = 'lollo_platform_as_asset_era_prefix',
                name = _('Era'),
                values = {'A', 'B', 'C'},
                uiType = 'BUTTON',
                -- defaultIndex = 0,
            },
            {
                key = 'lollo_platform_as_asset_is_cargo',
                name = _('PlatformAsAsset_CargoOrPassengers'),
                tooltip = _('PlatformAsAsset_CargoOrPassengers_Tooltip'),
                values = {_('PlatformAsAsset_Cargo'), _('PlatformAsAsset_Passengers'), _('OnlyTerrain')},
                uiType = 'BUTTON',
                -- defaultIndex = 0,
            },
            {
                key = 'lollo_platform_as_asset_x_10m',
                name = _('PlatformAsAsset_X10m'),
                values = _paramHelpers.Nought2PlusN.getSliderValues('lollo_platform_as_asset_x_10m'),
                uiType = 'SLIDER',
                defaultIndex = _paramHelpers.Nought2PlusN.getSliderMiddleValue('lollo_platform_as_asset_x_10m'),
            },
            {
                key = 'lollo_platform_as_asset_x_1m',
                name = _('PlatformAsAsset_X1m'),
                values = _paramHelpers.Nought2PlusN.getSliderValues('lollo_platform_as_asset_x_1m'),
                uiType = 'SLIDER',
                -- defaultIndex = 0,
            },
            {
                key = 'lollo_platform_as_asset_y_10m',
                name = _('PlatformAsAsset_Y10m'),
                values = _paramHelpers.Nought2PlusN.getSliderValues('lollo_platform_as_asset_y_10m'),
                uiType = 'SLIDER',
                defaultIndex = _paramHelpers.Nought2PlusN.getSliderMiddleValue('lollo_platform_as_asset_y_10m'),
            },
            {
                key = 'lollo_platform_as_asset_y_1m',
                name = _('PlatformAsAsset_Y1m'),
                values = _paramHelpers.Nought2PlusN.getSliderValues('lollo_platform_as_asset_y_1m'),
                uiType = 'SLIDER',
                -- defaultIndex = 0,
            },
            {
                key = 'lollo_platform_as_asset_terrain_alignment_type',
                name = _('TerrainAlignmentType'),
                values = _paramHelpers.terrainAlignmentType.getValues(),
                uiType = 'BUTTON',
            },
            {
                key = 'lollo_platform_as_asset_embankment',
                name = _('Embankment'),
                values = _paramHelpers.embankment.getSliderValues(),
                uiType = 'SLIDER',
                defaultIndex = _paramHelpers.embankment.getSliderMiddleValue(),
            },
        },
        updateFn = function(params)
            local result = {
                colliders = {},
                cost = 0,
                models = {},
            }

            local _xHalfSize = (
                _paramHelpers.Nought2PlusN.getValueFromSliderParamValue('lollo_platform_as_asset_x_10m', params.lollo_platform_as_asset_x_10m) +
                _paramHelpers.Nought2PlusN.getValueFromSliderParamValue('lollo_platform_as_asset_x_1m', params.lollo_platform_as_asset_x_1m)
            ) / 2
            local _yHalfSize = (
                _paramHelpers.Nought2PlusN.getValueFromSliderParamValue('lollo_platform_as_asset_y_10m', params.lollo_platform_as_asset_y_10m) +
                _paramHelpers.Nought2PlusN.getValueFromSliderParamValue('lollo_platform_as_asset_y_1m', params.lollo_platform_as_asset_y_1m)
            ) / 2
            local _zMax = 0

            local _era_prefix = ({constants.eras.era_a.prefix, constants.eras.era_b.prefix, constants.eras.era_c.prefix})[(params.lollo_platform_as_asset_era_prefix or 0) + 1]
            local _isCargo = (params.lollo_platform_as_asset_is_cargo or 0) == 0
            local _isOnlyTerrain = (params.lollo_platform_as_asset_is_cargo or 0) == 2
            local _modelId = 'lollo_freestyle_train_station/railroad/assets/' .. (_isCargo and 'cargo' or 'passengers') .. '/'.. _era_prefix ..'cube_1x1.mdl'
            logger.print('x Size =', _xHalfSize * 2, 'y Size =', _yHalfSize * 2, '_zMax =', _zMax)
            if _isOnlyTerrain then
                result.models[#result.models+1] = {
                    id = _modelId,
                    transf = {1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  0, 0, -constants.platformHeight, 1}
                }
            else
                for x = -_xHalfSize, _xHalfSize, 1 do
                    for y = -_yHalfSize, _yHalfSize, 1 do
                        result.models[#result.models+1] = {
                            id = _modelId,
                            transf = {1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  x, y, 0, 1}
                        }
                    end
                end
            end

            local _flatGroundFaces = { {
                {-_xHalfSize, -_yHalfSize, _zMax -0.1}, {-_xHalfSize, _yHalfSize, _zMax -0.1}, {_xHalfSize, _yHalfSize, _zMax -0.1}, {_xHalfSize, -_yHalfSize, _zMax -0.1}
            } }
            result.groundFaces = { -- the ground faces ignore z, the alignment lists don't
                {
                    face = _flatGroundFaces[1],
                    loop = true,
                    modes = {
                        {
                            key = 'none.lua',
                            type = 'FILL',
                        },
                    }
                }
            }

            local _embankmentTypeIndex = (params.lollo_platform_as_asset_embankment or 0)
            local _embankment = _paramHelpers.embankment.getValueFromSliderParamValue(_embankmentTypeIndex)
            logger.print('_embankment =') logger.debugPrint(_embankment)
            -- local _zShift = -0.1
            local _zShift = 0
            local _flatTerrainFaces = { {
                {-_xHalfSize -_embankment, -_yHalfSize -_embankment, _zMax + _zShift},
                {-_xHalfSize -_embankment, _yHalfSize +_embankment, _zMax + _zShift},
                {_xHalfSize +_embankment, _yHalfSize +_embankment, _zMax + _zShift},
                {_xHalfSize +_embankment, -_yHalfSize -_embankment, _zMax + _zShift}
            } }

            local _terrainAlignmentTypeIndex = (params.lollo_platform_as_asset_terrain_alignment_type or 0)
            local _terrainAlignment = _paramHelpers.terrainAlignmentType.getValues()[_terrainAlignmentTypeIndex + 1]
            result.terrainAlignmentLists = {
                {
                    type = _terrainAlignment,
                    optional = true, -- set this to true if the alignment must not throw collision errors when competing against other terrain alignments in the same construction
                    slopeLow = constants.slopeLow,
                    slopeHigh = constants.slopeHigh,
                    faces = _flatTerrainFaces,
                },
            }
            return result
        end,
        upgradeFn = function(_)
            return {}
        end
    }
end
