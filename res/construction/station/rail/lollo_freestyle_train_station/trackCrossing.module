local _constants = require('lollo_freestyle_train_station.constants')
-- local constructionutil = require "constructionutil"
local logger = require('lollo_freestyle_train_station.logger')
local moduleHelpers = require('lollo_freestyle_train_station.moduleHelpers')
-- local modulesutil = require "modulesutil"
local transfUtils = require('lollo_freestyle_train_station.transfUtils')
local transfUtilsUG = require "transf"


function data()
	return {
		availability = {
			yearFrom = 0,
			yearTo = 0
		},
		category = {
			categories = { "track-crossings", },
		},
		cost = {
			price = 0,
		},
		description = {
			name = _("TrackCrossingName"),
			description = _("TrackCrossingDesc"),
			icon = "ui/lollo_freestyle_train_station/trackCrossing.tga"
		},
		metadata = { },
		order = {
			value = 60,
		},
		type = _constants.trackCrossingModuleType,
		updateFn = function(result, slotTransf, tag, slotId, addModelFn, params, updateScriptParams)
			local nTerminal, nTrackEdge, baseId = result.demangleId(slotId)
			if not nTerminal or not nTrackEdge or not baseId then return end

			local _terminalData = params.terminals[nTerminal]
			local eraPrefix = moduleHelpers.getEraPrefix2(params, nTerminal, _terminalData, nTrackEdge)
			local modelId = nil
			if eraPrefix == moduleHelpers.eras.era_a.prefix then modelId = 'lollo_freestyle_train_station/railroad/trackCrossing/era_a_trackCrossing.mdl'
			elseif eraPrefix == moduleHelpers.eras.era_b.prefix then modelId = 'lollo_freestyle_train_station/railroad/trackCrossing/era_b_trackCrossing.mdl'
			else modelId = 'lollo_freestyle_train_station/railroad/trackCrossing/era_c_trackCrossing.mdl'
			end
			result.models[#result.models + 1] = {
				id = modelId,
				slotId = slotId,
				transf = slotTransf,
				tag = tag
			}

			local _laneZ = result.laneZs[nTerminal]
			local _isCargoTerminal = _terminalData.isCargo

			-- add link from platform border into track crossing
			local platformBorderPos = transfUtils.getPositionRaisedBy(
				_terminalData.crossConnectorsRelative[nTrackEdge].posTanX2[1][1],
				_laneZ
			)
			-- place these off the track centre so it won't overlap the track node (it happened!)
			local trackCrossingPos1 = transfUtils.getPositionRaisedBy(
				transfUtils.getExtrapolatedPosX2Continuation(
					_terminalData.crossConnectorsRelative[nTrackEdge].posTanX2[1][1],
					transfUtils.transf2Position(slotTransf),
					-1
				),
				_constants.trackCrossingZ
			)
			local trackCrossingPos2 = transfUtils.getPositionRaisedBy(
				transfUtils.getExtrapolatedPosX2Continuation(
					_terminalData.crossConnectorsRelative[nTrackEdge].posTanX2[1][1],
					transfUtils.transf2Position(slotTransf),
					1
				),
				_constants.trackCrossingZ
			)
			result.models[#result.models+1] = {
				id = _constants.passengerLaneLinkableModelId,
				transf = transfUtils.get1MLaneTransf(
					platformBorderPos,
					trackCrossingPos1
				)
			}
			result.models[#result.models+1] = {
				id = _constants.passengerLaneLinkableModelId,
				transf = transfUtils.get1MLaneTransf(
					trackCrossingPos1,
					trackCrossingPos2
				)
			}

			-- mark positions along the border of the opposite platform, so they can be joined later
			if result.terminateConstructionHookInfo.trackCrossingPositions[nTerminal] == nil then
				result.terminateConstructionHookInfo.trackCrossingPositions[nTerminal] = {}
			end
			table.insert(
				result.terminateConstructionHookInfo.trackCrossingPositions[nTerminal],
				{
					t = nTerminal,
					-- lanePosTanX2 = _terminalData.centrePlatformsRelative[nTrackEdge].posTanX2,
					pos = trackCrossingPos2
				}
			)
--[[
			-- only for cargo: link centre platforms to platform border
			local platformCentrePos
			if _isCargoTerminal then
				platformCentrePos = transfUtils.getPositionRaisedBy(
					_terminalData.crossConnectorsRelative[nTrackEdge].posTanX2[2][1],
					_laneZ
				)
				result.models[#result.models+1] = {
					id = _constants.passengerLaneModelId,
					transf = transfUtils.get1MLaneTransf(
						platformCentrePos,
						platformBorderPos
					)
				}
			end
]]
			if logger.isExtendedLog() then
--[[
				if platformCentrePos then
					result.models[#result.models+1] = {
						id = 'lollo_freestyle_train_station/icon/red.mdl',
						transf = {
							1, 0, 0, 0,
							0, 1, 0, 0,
							0, 0, nTerminal % 2 + 1, 0,
							platformCentrePos[1], platformCentrePos[2], platformCentrePos[3], 1
						}
					}
				end
]]
				result.models[#result.models+1] = {
					id = 'lollo_freestyle_train_station/icon/orange.mdl',
					transf = {
						1, 0, 0, 0,
						0, 1, 0, 0,
						0, 0, nTerminal % 2 + 1, 0,
						platformBorderPos[1], platformBorderPos[2], platformBorderPos[3], 1
					}
				}
				result.models[#result.models+1] = {
					id = 'lollo_freestyle_train_station/icon/yellow.mdl',
					transf = {
						1, 0, 0, 0,
						0, 1, 0, 0,
						0, 0, nTerminal % 2 + 1, 0,
						trackCrossingPos1[1], trackCrossingPos1[2], trackCrossingPos1[3], 1
					}
				}
				result.models[#result.models+1] = {
					id = 'lollo_freestyle_train_station/icon/blue.mdl',
					transf = {
						1, 0, 0, 0,
						0, 1, 0, 0,
						0, 0, nTerminal % 2 + 1, 0,
						trackCrossingPos2[1], trackCrossingPos2[2], trackCrossingPos2[3], 1
					}
				}
			end
		end,

		getModelsFn = function(params)
			return {
				{
					id = 'lollo_freestyle_train_station/railroad/trackCrossing/era_c_trackCrossing.mdl',
					transf = _constants.idTransf,
				},
			}
		end
	}
end
