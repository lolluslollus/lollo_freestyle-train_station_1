function data()
    local arrayUtils = require('lollo_freestyle_train_station.arrayUtils')
    local constants = require('lollo_freestyle_train_station.constants')
    local fenceModelHelper = require('lollo_fence.modelHelper')
    local logger = require('lollo_freestyle_train_station.logger')
    local transfUtils = require('lollo_freestyle_train_station.transfUtils')

    local function _addGround(transf, result, wallBehindModelId)
        local _faceTransformed = wallBehindModelId == nil
            and transfUtils.getFaceTransformed_FAST(
                transf,
                {
                    {-0.5, -0.2, 0, 1.0},
                    {0.5, -0.2, 0, 1.0},
                    {0.5, 0.5, 0, 1.0},
                    {-0.5, 0.5, 0, 1.0},
                    -- {x, positive backwards, z, 1}
                }
            )
            or transfUtils.getFaceTransformed_FAST(
                transf,
                {
                    {-0.5, -0.2, 0, 1.0},
                    {0.5, -0.2, 0, 1.0},
                    {0.5, 1.0, 0, 1.0},
                    {-0.5, 1.0, 0, 1.0},
                    -- {x, positive backwards, z, 1}
                }
            )
        table.insert(
            result.groundFaces,
            {
                face = _faceTransformed,
                loop = true,
                modes = {
                    {
                        type = 'FILL',
                        key = 'shared/asphalt_01.gtex.lua' --'shared/gravel_03.gtex.lua'
                    }
                }
            }
        )
        table.insert(
            result.terrainAlignmentLists,
            {
                faces =  { _faceTransformed },
                optional = true,
                slopeHigh = 9.9,
                slopeLow = 9.6,
                type = 'EQUAL',
            }
        )
    end

    local function _addWall(transf, result, zShift, wallMainModelId, wallBaseModelId)
        if wallBaseModelId == nil then
            if wallMainModelId ~= nil then
                table.insert(
                    result.models,
                    {
                        id = wallMainModelId,
                        transf = transf
                    }
                )
            end
        else
            local _transfZShifted = transfUtils.getTransf_ZShifted(transf, zShift)
            if wallMainModelId ~= nil then
                table.insert(
                    result.models,
                    {
                        id = wallMainModelId,
                        transf = _transfZShifted
                    }
                )
            end
            table.insert(
                result.models,
                {
                    id = wallBaseModelId,
                    transf = _transfZShifted
                }
            )
        end
    end

    local function _addWallBehind(transf, result, zShift, wallBehindModelId, wallBehindBaseModelId)
        if wallBehindModelId == nil then return end

        local _wallBehindTransf_ZShifted = transfUtils.getTransf_ZShifted(transf, zShift)
        table.insert(
            result.models,
            {
                id = wallBehindModelId,
                transf = _wallBehindTransf_ZShifted
            }
        )
        if wallBehindBaseModelId ~= nil then
            table.insert(
                result.models,
                {
                    id = wallBehindBaseModelId,
                    transf = _wallBehindTransf_ZShifted
                }
            )
        end
    end

	return {
        -- type = 'ASSET_DEFAULT',
        type = 'ASSET_TRACK', -- this is not the same as snapping.rail below, coz it lowers the asset to the ground.
		availability = {
			yearFrom = -1,
			yearTo = -1,
		},
        categories = { 'stairs' },
		description = {
			name = _('FenceAssetsName'),
			description = _('FenceAssetsDesc'),
            icon = 'ui/construction/lollo_freestyle_train_station/fence_assets.tga',
		},
		order = 1110,
		autoRemovable = false,
        -- buildMode = 'MULTI',
		skipCollision = true,
        snapping = {
			rail = true,
			road = true,
			water = false
		},
		params = {},
		updateFn = function(params)
            logger.print('auto_fence.updateFn firing, params =')
            logger.debugPrint(arrayUtils.cloneDeepOmittingFields(params, {'state', 'transfs', 'transfs_ground', 'transfs_wallBehind'}, true))

            local _initParams = function()
                -- allow adding new params to old cons that did not have them
                local defaults = fenceModelHelper.getDefaultIndexes()
                params.lolloFenceAssets_doTerrain = params.lolloFenceAssets_doTerrain or defaults.lolloFenceAssets_doTerrain
                params.lolloFenceAssets_model = params.lolloFenceAssets_model or defaults.lolloFenceAssets_model
                params.lolloFenceAssets_wallEraPrefix = params.lolloFenceAssets_wallEraPrefix or defaults.lolloFenceAssets_wallEraPrefix
                params.lolloFenceAssets_wallBehindOnBridges = params.lolloFenceAssets_wallBehindOnBridges or defaults.lolloFenceAssets_wallBehindOnBridges
                params.lolloFenceAssets_wallBehindInTunnels = params.lolloFenceAssets_wallBehindInTunnels or defaults.lolloFenceAssets_wallBehindInTunnels
                params.lolloFenceAssets_wallBehindModel = params.lolloFenceAssets_wallBehindModel or defaults.lolloFenceAssets_wallBehindModel
                params.transfs = params.transfs or {} -- obsolete, it was an early release, newer releases have transfs_ground instead
                params.transfs_ground = params.transfs_ground or {}
                params.transfs_wallBehind = params.transfs_wallBehind or {}
            end
            _initParams()

            local result = {
                colliders = {},
                cost = 0,
                edgeLists = {},
                groundFaces = { -- dummy ground faces so this is treated as a proper construction, and the construction mover can adjust it
                    {
                        face = {
                            {0.1, -0.1, 0.0, 1.0},
                            {0.1, 0.1, 0.0, 1.0},
                            {-0.1, 0.1, 0.0, 1.0},
                            {-0.1, -0.1, 0.0, 1.0},
                        },
                        modes = {
                            {
                                type = 'FILL',
                                key = 'shared/asphalt_01.gtex.lua' --'shared/gravel_03.gtex.lua'
                            }
                        }
                    },
                },
                models = {
					-- {
					-- 	id = 'lollo_freestyle_train_station/icon/blue.mdl',
                    --     transf = {1, 0, 0, 0,
                    --         0, 1, 0, 0,
                    --         0, 0, 1, 0,
                    --         0, 0, 0, 1},
					-- },
                },
                terrainAlignmentLists = { {
                    type = 'EQUAL',
                    optional = true,
                    faces =  { }
                } },
            }

            local wallMainModelId = fenceModelHelper.getModels()[params.lolloFenceAssets_model + 1].fileName

            local wallBaseModelId = nil
            if params.lolloFenceAssets_wallEraPrefix == 1 then
                wallBaseModelId = 'lollo_freestyle_train_station/trackWalls/era_a_wall_base_5m.mdl'
            elseif params.lolloFenceAssets_wallEraPrefix == 2 then
                wallBaseModelId = 'lollo_freestyle_train_station/trackWalls/era_b_wall_base_5m.mdl'
            elseif params.lolloFenceAssets_wallEraPrefix == 3 then
                wallBaseModelId = 'lollo_freestyle_train_station/trackWalls/era_c_wall_base_5m.mdl'
            end

            local wallBehindModelId = fenceModelHelper.getWallBehindModels()[params.lolloFenceAssets_wallBehindModel + 1].fileName

            local wallBehindBaseModelId = nil
            if wallBehindModelId ~= nil then
                if params.lolloFenceAssets_wallEraPrefix == 1 then
                    wallBehindBaseModelId = 'lollo_freestyle_train_station/trackWalls/behind/era_a_wall_base_5m.mdl'
                elseif params.lolloFenceAssets_wallEraPrefix == 2 then
                    wallBehindBaseModelId = 'lollo_freestyle_train_station/trackWalls/behind/era_b_wall_base_5m.mdl'
                elseif params.lolloFenceAssets_wallEraPrefix == 3 then
                    wallBehindBaseModelId = 'lollo_freestyle_train_station/trackWalls/behind/era_c_wall_base_5m.mdl'
                end
            end

            -- make sure something appears even if the models are all nil, so the costruction will not stay around as a ghost
            if not(wallMainModelId) and not(wallBaseModelId) and not(wallBehindModelId) then
                result.labelText = {
                    [0] = { _('wallWithNoModelsHere'), _('wallWithNoModelsHere') }
                }
                result.models = {{
                    id = constants.yellowMessageModelFileName,
                    transf = constants.idTransf
                }}
                return result
            end

            local isWallBehindInTunnels = params.lolloFenceAssets_wallBehindInTunnels == 1
            local isWallBehindOnBridges = params.lolloFenceAssets_wallBehindOnBridges == 1
            local isDoTerrain = params.lolloFenceAssets_doTerrain == 1

            logger.print('fenceModelId =', wallMainModelId or 'NIL')
            logger.print('wallBaseModelId =', wallBaseModelId or 'NIL')
            logger.print('#params.transfs =', #params.transfs)

            local _zStart = (wallBaseModelId == nil) and 0 or constants.platformHeight
            -- the wall is 1.4m tall, constants.platformHeight is 1.2m, so we sink all by 20cm. This is level with freestyle stations and looks good.
            for _, transf in pairs(params.transfs) do -- compatibility with early releases, newer releases have no transfs
                _addWall(transf, result, _zStart, wallMainModelId, wallBaseModelId)
            end
            for _, transfData in pairs(params.transfs_ground) do
                _addWall(transfData.transf, result, _zStart, wallMainModelId, wallBaseModelId)
                if isDoTerrain and transfData.groundBridgeTunnel_012 == 0 then
                    _addGround(transfData.transf, result, wallBehindModelId)
                end
            end
            for _, transfData in pairs(params.transfs_wallBehind) do
                if transfData.groundBridgeTunnel_012 == 0
                or (transfData.groundBridgeTunnel_012 == 1 and isWallBehindOnBridges)
                or (transfData.groundBridgeTunnel_012 == 2 and isWallBehindInTunnels) then
                    _addWallBehind(transfData.transf, result, _zStart, wallBehindModelId, wallBehindBaseModelId)
                end
            end

			return result
		end,

        upgradeFn = function(params)
            return {}
        end,
	}
end
