function data()
    local arrayUtils = require('lollo_freestyle_train_station.arrayUtils')
    local constants = require('lollo_freestyle_train_station.constants')
    local fenceModelHelper = require('lollo_fence.modelHelper')
    local logger = require('lollo_freestyle_train_station.logger')
    local transfUtils = require('lollo_freestyle_train_station.transfUtils')

    local function _addGround(transf, result, zed, wallBehindModelId, isDoTerrain)
        if not(isDoTerrain) then return end

        local _faceTransformed = wallBehindModelId == nil
            and transfUtils.getFaceTransformed_FAST(
                transf,
                {
                    {-0.5, -0.2, zed, 1.0},
                    {0.5, -0.2, zed, 1.0},
                    {0.5, 0.5, zed, 1.0},
                    {-0.5, 0.5, zed, 1.0},
                    -- {x, positive backwards, z, 1}
                }
            )
            or transfUtils.getFaceTransformed_FAST(
                transf,
                {
                    {-0.5, -0.2, zed, 1.0},
                    {0.5, -0.2, zed, 1.0},
                    {0.5, 1.0, zed, 1.0},
                    {-0.5, 1.0, zed, 1.0},
                    -- {x, positive backwards, z, 1}
                }
            )
        table.insert(
            result.groundFaces,
            {
                face = _faceTransformed,
                loop = true,
                modes = {
                    {
                        type = 'FILL',
                        key = 'shared/asphalt_01.gtex.lua' --'shared/gravel_03.gtex.lua'
                    }
                }
            }
        )

        table.insert(
            result.terrainAlignmentLists,
            {
                faces =  { _faceTransformed },
                optional = true,
                slopeHigh = 9.9,
                slopeLow = 9.6,
                type = 'EQUAL',
            }
        )
    end

    local function _addWall(transf, result, wallMainModelId, wallBaseModelId)
        if wallMainModelId ~= nil then
            result.models[#result.models+1] = {
                id = wallMainModelId,
                transf = transf
            }
        end
        if wallBaseModelId ~= nil then
            result.models[#result.models+1] = {
                id = wallBaseModelId,
                transf = transf
            }
        end
    end

    local function _addWallBehind(transf, result, zShift, zRotRad, wallBehindModelId, wallBehindBaseModelId)
        if wallBehindModelId == nil then return end

        local wallBehindTransf
        if zRotRad >= 0 then
            -- this will never look perfect, it's in the nature of transformations
            wallBehindTransf = transfUtils.getTransf_XSkewedOnZ(transf, zShift)
        else
            -- idem
            wallBehindTransf = transfUtils.getTransf_XSkewedOnZ(
                transfUtils.getTransf_XScaled(transf, 1 -zRotRad), -- all walls behind are 1m deep
                zShift * (1 -zRotRad)
            )
        end
        table.insert(
            result.models,
            {
                id = wallBehindModelId,
                transf = wallBehindTransf
            }
        )
        if wallBehindBaseModelId ~= nil then
            table.insert(
                result.models,
                {
                    id = wallBehindBaseModelId,
                    transf = wallBehindTransf
                }
            )
        end
    end

	return {
        -- type = 'ASSET_DEFAULT',
        type = 'ASSET_TRACK', -- this is not the same as snapping.rail below, coz it lowers the asset to the ground.
		availability = {
			yearFrom = 0,
			yearTo = 0,
		},
        categories = { 'stairs' },
		description = {
			name = _('FenceAssetsName'),
			description = _('FenceAssetsDesc'),
            icon = 'ui/construction/lollo_freestyle_train_station/fence_assets.tga',
		},
		order = 1110,
		autoRemovable = false,
        -- buildMode = 'MULTI',
		skipCollision = true,
        snapping = {
			rail = true,
			road = true,
			water = false
		},
		params = fenceModelHelper.getConParams(),
		updateFn = function(params)
            logger.print('fenceAssetsScript.updateFn firing, params =') logger.debugPrint(arrayUtils.cloneDeepOmittingFields(params, {'state'}, true))

            local _initParams = function()
                local defaults = fenceModelHelper.getDefaultIndexes()
                params.lolloFenceAssets_doTerrain = params.lolloFenceAssets_doTerrain or defaults.lolloFenceAssets_doTerrain
                params.lolloFenceAssets_length = params.lolloFenceAssets_length or defaults.lolloFenceAssets_length
                params.lolloFenceAssets_model = params.lolloFenceAssets_model or defaults.lolloFenceAssets_model
                params.lolloFenceAssets_wallEraPrefix = params.lolloFenceAssets_wallEraPrefix or defaults.lolloFenceAssets_wallEraPrefix
                params.lolloFenceAssets_wallBehindModel = params.lolloFenceAssets_wallBehindModel or defaults.lolloFenceAssets_wallBehindModel
                params.lolloFenceAssets_yShift = params.lolloFenceAssets_yShift or defaults.lolloFenceAssets_yShift
                params.lolloFenceAssets_zDelta = params.lolloFenceAssets_zDelta or defaults.lolloFenceAssets_zDelta
                params.lolloFenceAssets_zRotation = params.lolloFenceAssets_zRotation or defaults.lolloFenceAssets_zRotation
            end
            _initParams()

            -- we don't use paramX and paramY coz they are awkward here
            -- they cycle in steps of math.pi / 16, just in case you want to add them.

            local function _getWallBaseModelId()
                local modelId = nil
                if params.lolloFenceAssets_wallEraPrefix == 1 then
                    modelId = 'lollo_freestyle_train_station/trackWalls/era_a_wall_base_5m.mdl'
                elseif params.lolloFenceAssets_wallEraPrefix == 2 then
                    modelId = 'lollo_freestyle_train_station/trackWalls/era_b_wall_base_5m.mdl'
                elseif params.lolloFenceAssets_wallEraPrefix == 3 then
                    modelId = 'lollo_freestyle_train_station/trackWalls/era_c_wall_base_5m.mdl'
                end
                return modelId
            end

            local function _getWallBehindBaseModelId()
                if not(fenceModelHelper.getWallBehindModels()[params.lolloFenceAssets_wallBehindModel + 1].fileName) then return nil end

                local modelId = nil
                if params.lolloFenceAssets_wallEraPrefix == 1 then
                    modelId = 'lollo_freestyle_train_station/trackWalls/behind/era_a_wall_base_5m.mdl'
                elseif params.lolloFenceAssets_wallEraPrefix == 2 then
                    modelId = 'lollo_freestyle_train_station/trackWalls/behind/era_b_wall_base_5m.mdl'
                elseif params.lolloFenceAssets_wallEraPrefix == 3 then
                    modelId = 'lollo_freestyle_train_station/trackWalls/behind/era_c_wall_base_5m.mdl'
                end
                return modelId
            end

            local function _getYStart()
                local result = fenceModelHelper.getYShiftActualValues()[params.lolloFenceAssets_yShift + 1]
                return result
            end

            local function _getZShift()
                local result = fenceModelHelper.getZDeltaActualValues()[params.lolloFenceAssets_zDelta + 1]
                return result
            end

            local function _getZRotationParameters()
                local zRotRad = params.lolloFenceAssets_length == 0
                    and 0
                    or fenceModelHelper.getZRotationActualValues()[params.lolloFenceAssets_zRotation + 1] / (params.lolloFenceAssets_length)

                local yShift = math.sin(zRotRad) * 0.5 -- walls are 1 m wide and their axes are centred at the bottom middle rear. They are about 0.1 m thick.
                local xShift = math.cos(zRotRad) * 0.5 + 0.5
                if zRotRad > 0 then -- compensate for XYZ decentering in the model, which is required for other purposes
                    xShift = xShift - 0.097 * math.sin(zRotRad)
                    yShift = yShift - 0.097 * (1 - math.cos(zRotRad))
                end

                return xShift, yShift, zRotRad
            end

            local result = {
                colliders = {},
                cost = 0,
                edgeLists = {},
                groundFaces = { -- dummy ground faces so this is treated as a proper construction, and the construction mover can adjust it
                    {
                        face = {
                            {0.1, -0.1, 0.0, 1.0},
                            {0.1, 0.1, 0.0, 1.0},
                            {-0.1, 0.1, 0.0, 1.0},
                            {-0.1, -0.1, 0.0, 1.0},
                        },
                        modes = {
                            {
                                type = 'FILL',
                                key = 'shared/asphalt_01.gtex.lua' --'shared/gravel_03.gtex.lua'
                            }
                        }
                    },
                },
                models = {
					-- {
					-- 	id = 'lollo_freestyle_train_station/icon/blue.mdl',
                    --     transf = {1, 0, 0, 0,
                    --         0, 1, 0, 0,
                    --         0, 0, 1, 0,
                    --         0, 0, 0, 1},
					-- },
                },
                terrainAlignmentLists = { {
                    type = 'EQUAL',
                    optional = true,
                    faces =  { }
                } },
            }

            local function _addModels()
                local isDoTerrain = params.lolloFenceAssets_doTerrain == 1
                local wallMainModelId = fenceModelHelper.getModels()[params.lolloFenceAssets_model + 1].fileName
                local wallBaseModelId = _getWallBaseModelId()
                local wallBehindBaseModelId = _getWallBehindBaseModelId()
                local wallBehindModelId = fenceModelHelper.getWallBehindModels()[params.lolloFenceAssets_wallBehindModel + 1].fileName
                logger.print('_addModels got isDoTerrain =', isDoTerrain,
                    'wallMainModelId =', wallMainModelId or 'NIL',
                    'wallBaseModelId =', wallBaseModelId or 'NIL',
                    'wallBehindBaseModelId =', wallBehindBaseModelId or 'NIL',
                    'wallBehindModelId =', wallBehindModelId or 'NIL'
                )
                -- make sure something appears even if the models are all nil, so the costruction will not stay around as a ghost
                if not(wallMainModelId) and not(wallBaseModelId) and not(wallBehindModelId) then
                    result.labelText = {
                        [0] = { _('wallWithNoModelsHere'), _('wallWithNoModelsHere') }
                    }
                    result.models = {{
                        id = constants.yellowMessageModelFileName,
                        transf = constants.idTransf
                    }}
                    return
                end

                local yStart = _getYStart()
                -- the wall is 1.4m tall, so we sink all by 20cm. This is level with freestyle stations and looks good.
                local zStart = wallBaseModelId == nil and 0 or constants.platformHeight

                local xShift, yShift, zRotRad = _getZRotationParameters()
                local zShift = _getZShift()
                logger.print('_addModels got zRotRad =', 180 / math.pi * zRotRad, ', yShift =', yShift, ', xShift =', xShift, ', zShift =', zShift)

                local transf = {
                    1, 0, 0, 0,
                    0, 1, 0, 0,
                    0, 0, 1, 0,
                    0, yStart, zStart, 1
                }
                for i = 1, params.lolloFenceAssets_length + 1, 1 do
                    local skewedTransf = transfUtils.getTransf_XSkewedOnZ(transf, zShift)
                    _addWall(skewedTransf, result, wallMainModelId, wallBaseModelId)
                    _addGround(skewedTransf, result, -zStart, wallBehindModelId, isDoTerrain)
                    _addWallBehind(transf, result, zShift, zRotRad, wallBehindModelId, wallBehindBaseModelId)
                    transf = transfUtils.getTransf_ZRotated_Shifted(
                        transf,
                        zRotRad,
                        {xShift, yShift, zShift * xShift}
                    )
                end
            end
            _addModels()

			return result
		end,

        upgradeFn = function(params)
            return {}
        end,
	}
end
